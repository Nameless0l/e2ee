/**
 * üì± Exemple d'utilisation pratique du Secure Storage
 * 
 * Ce fichier montre comment utiliser le syst√®me de stockage s√©curis√©
 * dans une application r√©elle.
 */

import { SecureKeyStoreFactory, SecureKeyStore } from './secure_storage';

// üë§ Gestionnaire de session utilisateur
class SessionManager {
  private store: SecureKeyStore;
  
  constructor(platform: 'android' | 'ios' = 'android') {
    this.store = SecureKeyStoreFactory.create(platform);
  }
  
  // Connexion utilisateur
  async login(userId: string, token: string, refreshToken: string) {
    try {
      await this.store.storeEncryptedData('user_id', userId);
      await this.store.storeEncryptedData('access_token', token);
      await this.store.storeEncryptedData('refresh_token', refreshToken);
      await this.store.storeEncryptedData('login_time', new Date().toISOString());
      
      console.log('‚úÖ Session utilisateur sauvegard√©e de mani√®re s√©curis√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de session:', error);
      throw error;
    }
  }
  
  // R√©cup√©ration des informations de session
  async getSessionInfo() {
    try {
      const userId = await this.store.getEncryptedData('user_id');
      const accessToken = await this.store.getEncryptedData('access_token');
      const refreshToken = await this.store.getEncryptedData('refresh_token');
      const loginTime = await this.store.getEncryptedData('login_time');
      
      if (!userId || !accessToken) {
        return null; // Pas de session active
      }
      
      return {
        userId,
        accessToken,
        refreshToken,
        loginTime: new Date(loginTime || '')
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de session:', error);
      return null;
    }
  }
  
  // V√©rifier si l'utilisateur est connect√©
  async isLoggedIn(): Promise<boolean> {
    const session = await this.getSessionInfo();
    return session !== null;
  }
  
  // D√©connexion (nettoyage s√©curis√©)
  async logout() {
    try {
      await this.store.deleteEncryptedData('user_id');
      await this.store.deleteEncryptedData('access_token');
      await this.store.deleteEncryptedData('refresh_token');
      await this.store.deleteEncryptedData('login_time');
      
      console.log('‚úÖ Session nettoy√©e de mani√®re s√©curis√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage de session:', error);
    }
  }
}

// üîß Gestionnaire de configuration d'application
class AppConfigManager {
  private store: SecureKeyStore;
  
  constructor(platform: 'android' | 'ios' = 'android') {
    this.store = SecureKeyStoreFactory.create(platform);
  }
  
  // Sauvegarder la configuration API
  async saveApiConfig(config: {
    endpoint: string;
    clientId: string;
    clientSecret: string;
    timeout?: number;
  }) {
    try {
      await this.store.storeEncryptedData('api_config', JSON.stringify(config));
      console.log('‚úÖ Configuration API sauvegard√©e');
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde config:', error);
      throw error;
    }
  }
  
  // R√©cup√©rer la configuration API
  async getApiConfig() {
    try {
      const configStr = await this.store.getEncryptedData('api_config');
      if (!configStr) return null;
      
      return JSON.parse(configStr);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration config:', error);
      return null;
    }
  }
  
  // Sauvegarder les pr√©f√©rences utilisateur
  async saveUserPreferences(preferences: {
    theme: 'light' | 'dark';
    language: string;
    notifications: boolean;
    biometricAuth?: boolean;
  }) {
    try {
      await this.store.storeEncryptedData('user_preferences', JSON.stringify(preferences));
      console.log('‚úÖ Pr√©f√©rences utilisateur sauvegard√©es');
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde pr√©f√©rences:', error);
    }
  }
  
  // R√©cup√©rer les pr√©f√©rences utilisateur
  async getUserPreferences() {
    try {
      const prefStr = await this.store.getEncryptedData('user_preferences');
      if (!prefStr) {
        // Retourner des pr√©f√©rences par d√©faut
        return {
          theme: 'light' as const,
          language: 'fr',
          notifications: true,
          biometricAuth: false
        };
      }
      
      return JSON.parse(prefStr);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration pr√©f√©rences:', error);
      return null;
    }
  }
}

// üõ°Ô∏è Gestionnaire de donn√©es sensibles
class SecureDataManager {
  private store: SecureKeyStore;
  
  constructor(platform: 'android' | 'ios' = 'android') {
    this.store = SecureKeyStoreFactory.create(platform);
  }
  
  // Sauvegarder des informations bancaires (exemple)
  async saveBankingInfo(info: {
    cardLastFour: string;
    bankName: string;
    accountType: string;
  }) {
    try {
      await this.store.storeEncryptedData('banking_info', JSON.stringify(info));
      console.log('‚úÖ Informations bancaires sauvegard√©es de mani√®re s√©curis√©e');
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde donn√©es bancaires:', error);
      throw error;
    }
  }
  
  // Sauvegarder un PIN ou code d'acc√®s
  async savePinCode(pin: string) {
    try {
      // Hash du PIN avant stockage (dans un vrai projet)
      await this.store.storeEncryptedData('user_pin', pin);
      console.log('‚úÖ PIN sauvegard√© de mani√®re s√©curis√©e');
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde PIN:', error);
      throw error;
    }
  }
  
  // V√©rifier le PIN
  async verifyPin(inputPin: string): Promise<boolean> {
    try {
      const storedPin = await this.store.getEncryptedData('user_pin');
      return storedPin === inputPin;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification PIN:', error);
      return false;
    }
  }
  
  // Lister toutes les donn√©es stock√©es (pour debug)
  async listStoredData() {
    try {
      const keys = await this.store.getAllKeys();
      console.log('üîë Donn√©es stock√©es:', keys);
      return keys;
    } catch (error) {
      console.error('‚ùå Erreur listage donn√©es:', error);
      return [];
    }
  }
  
  // Nettoyer toutes les donn√©es sensibles
  async clearAllSensitiveData() {
    try {
      const keys = await this.store.getAllKeys();
      for (const key of keys) {
        await this.store.deleteEncryptedData(key);
      }
      console.log('‚úÖ Toutes les donn√©es sensibles ont √©t√© supprim√©es');
    } catch (error) {
      console.error('‚ùå Erreur nettoyage donn√©es:', error);
    }
  }
}

// üß™ Fonction de d√©monstration
async function demonstrationComplete() {
  console.log('üöÄ D√©monstration compl√®te du Secure Storage\n');
  
  // 1. Gestion de session
  console.log('1Ô∏è‚É£ Test Session Manager');
  const sessionManager = new SessionManager('android');
  
  await sessionManager.login('user123', 'token_abc', 'refresh_xyz');
  
  const isLoggedIn = await sessionManager.isLoggedIn();
  console.log(`Utilisateur connect√©: ${isLoggedIn}`);
  
  const sessionInfo = await sessionManager.getSessionInfo();
  console.log('Infos session:', sessionInfo);
  
  // 2. Gestion de configuration
  console.log('\n2Ô∏è‚É£ Test Config Manager');
  const configManager = new AppConfigManager('android');
  
  await configManager.saveApiConfig({
    endpoint: 'https://api.monapp.com',
    clientId: 'client_123',
    clientSecret: 'secret_456',
    timeout: 5000
  });
  
  await configManager.saveUserPreferences({
    theme: 'dark',
    language: 'fr',
    notifications: true,
    biometricAuth: true
  });
  
  const apiConfig = await configManager.getApiConfig();
  const userPrefs = await configManager.getUserPreferences();
  console.log('Config API:', apiConfig);
  console.log('Pr√©f√©rences:', userPrefs);
  
  // 3. Donn√©es sensibles
  console.log('\n3Ô∏è‚É£ Test Secure Data Manager');
  const secureManager = new SecureDataManager('android');
  
  await secureManager.savePinCode('1234');
  await secureManager.saveBankingInfo({
    cardLastFour: '4567',
    bankName: 'Ma Banque',
    accountType: 'Courant'
  });
  
  const pinValid = await secureManager.verifyPin('1234');
  console.log(`PIN valide: ${pinValid}`);
  
  const invalidPin = await secureManager.verifyPin('0000');
  console.log(`PIN invalide: ${!invalidPin}`);
  
  // 4. √âtat final
  console.log('\n4Ô∏è‚É£ √âtat final du stockage');
  await secureManager.listStoredData();
  
  // 5. Nettoyage de session (simulation de d√©connexion)
  console.log('\n5Ô∏è‚É£ Simulation de d√©connexion');
  await sessionManager.logout();
  
  const stillLoggedIn = await sessionManager.isLoggedIn();
  console.log(`Encore connect√© apr√®s logout: ${stillLoggedIn}`);
  
  console.log('\n‚ú® D√©monstration termin√©e !');
}

// Exporter les classes pour utilisation
export { SessionManager, AppConfigManager, SecureDataManager, demonstrationComplete };

// Auto-ex√©cution si le fichier est lanc√© directement
if (require.main === module) {
  demonstrationComplete()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('üí• Erreur dans la d√©monstration:', error);
      process.exit(1);
    });
}
