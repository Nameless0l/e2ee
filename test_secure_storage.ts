import { 
  SecureKeyStore, 
  AndroidSecureKeyStore, 
  iOSSecureKeyStore, 
  SecureKeyStoreFactory,
  StorageSimulator 
} from './secure_storage';

// Classe de test avec utilitaires
class SecureStorageTests {
  
  // Test basique pour Android
  static async testAndroidBasicOperations() {
    console.log('\nü§ñ Tests Android - Op√©rations de base');
    console.log('=' .repeat(50));
    
    const store = SecureKeyStoreFactory.create('android');
    
    try {
      // Nettoyer le stockage avant le test
      StorageSimulator.clear();
      
      // Test 1: Stocker des donn√©es
      console.log('\n1Ô∏è‚É£ Test stockage...');
      await store.storeEncryptedData('user_token', 'mon-token-secret');
      console.log('‚úÖ Donn√©es stock√©es avec succ√®s');
      
      // Test 2: R√©cup√©rer des donn√©es
      console.log('\n2Ô∏è‚É£ Test r√©cup√©ration...');
      const retrievedToken = await store.getEncryptedData('user_token');
      console.log(`Donn√©es r√©cup√©r√©es: "${retrievedToken}"`);
      
      if (retrievedToken === 'mon-token-secret') {
        console.log('‚úÖ R√©cup√©ration r√©ussie');
      } else {
        console.log('‚ùå √âchec de la r√©cup√©ration');
      }
      
      // Test 3: Stocker plusieurs √©l√©ments
      console.log('\n3Ô∏è‚É£ Test stockage multiple...');
      await store.storeEncryptedData('api_key', 'api-12345');
      await store.storeEncryptedData('refresh_token', 'refresh-67890');
      console.log('‚úÖ Plusieurs √©l√©ments stock√©s');
      
      // Test 4: Lister toutes les cl√©s
      console.log('\n4Ô∏è‚É£ Test liste des cl√©s...');
      const allKeys = await store.getAllKeys();
      console.log(`Cl√©s trouv√©es: [${allKeys.join(', ')}]`);
      console.log(`Nombre de cl√©s: ${allKeys.length}`);
      
      // Test 5: Supprimer un √©l√©ment
      console.log('\n5Ô∏è‚É£ Test suppression...');
      await store.deleteEncryptedData('user_token');
      const deletedToken = await store.getEncryptedData('user_token');
      
      if (deletedToken === null) {
        console.log('‚úÖ Suppression r√©ussie');
      } else {
        console.log('‚ùå √âchec de la suppression');
      }
      
      // V√©rifier les cl√©s restantes
      const remainingKeys = await store.getAllKeys();
      console.log(`Cl√©s restantes: [${remainingKeys.join(', ')}]`);
      
    } catch (error) {
      console.error(`‚ùå Erreur dans le test Android: ${error}`);
    }
  }
  
  // Test basique pour iOS
  static async testiOSBasicOperations() {
    console.log('\nüçé Tests iOS - Op√©rations de base');
    console.log('=' .repeat(50));
    
    const store = SecureKeyStoreFactory.create('ios');
    
    try {
      // Nettoyer le stockage avant le test
      StorageSimulator.clear();
      
      // Test 1: Stocker des donn√©es
      console.log('\n1Ô∏è‚É£ Test stockage...');
      await store.storeEncryptedData('password', 'motdepasse123');
      console.log('‚úÖ Donn√©es stock√©es avec succ√®s');
      
      // Test 2: R√©cup√©rer des donn√©es
      console.log('\n2Ô∏è‚É£ Test r√©cup√©ration...');
      const retrievedPassword = await store.getEncryptedData('password');
      console.log(`Donn√©es r√©cup√©r√©es: "${retrievedPassword}"`);
      
      if (retrievedPassword === 'motdepasse123') {
        console.log('‚úÖ R√©cup√©ration r√©ussie');
      } else {
        console.log('‚ùå √âchec de la r√©cup√©ration');
      }
      
      // Test 3: Test avec donn√©es complexes
      console.log('\n3Ô∏è‚É£ Test donn√©es complexes...');
      const complexData = JSON.stringify({
        userId: 12345,
        email: 'test@example.com',
        preferences: { theme: 'dark', language: 'fr' }
      });
      
      await store.storeEncryptedData('user_data', complexData);
      const retrievedComplexData = await store.getEncryptedData('user_data');
      
      if (retrievedComplexData === complexData) {
        console.log('‚úÖ Donn√©es complexes g√©r√©es correctement');
      } else {
        console.log('‚ùå Probl√®me avec les donn√©es complexes');
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur dans le test iOS: ${error}`);
    }
  }
  
  // Test de gestion des erreurs
  static async testErrorHandling() {
    console.log('\nüö® Tests de gestion des erreurs');
    console.log('=' .repeat(50));
    
    const store = SecureKeyStoreFactory.create('android');
    
    try {
      // Nettoyer le stockage
      StorageSimulator.clear();
      
      // Test 1: R√©cup√©rer une cl√© inexistante
      console.log('\n1Ô∏è‚É£ Test cl√© inexistante...');
      const nonExistentData = await store.getEncryptedData('cle_inexistante');
      
      if (nonExistentData === null) {
        console.log('‚úÖ Retourne null pour une cl√© inexistante');
      } else {
        console.log('‚ùå Devrait retourner null');
      }
      
      // Test 2: Supprimer une cl√© inexistante
      console.log('\n2Ô∏è‚É£ Test suppression cl√© inexistante...');
      await store.deleteEncryptedData('cle_inexistante');
      console.log('‚úÖ Suppression d\'une cl√© inexistante g√©r√©e');
      
      // Test 3: Stocker une valeur vide
      console.log('\n3Ô∏è‚É£ Test valeur vide...');
      await store.storeEncryptedData('empty_value', '');
      const emptyValue = await store.getEncryptedData('empty_value');
      
      if (emptyValue === '') {
        console.log('‚úÖ Valeur vide g√©r√©e correctement');
      } else {
        console.log('‚ùå Probl√®me avec la valeur vide');
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur dans le test de gestion des erreurs: ${error}`);
    }
  }
  
  // Test de performance basique
  static async testPerformance() {
    console.log('\n‚ö° Tests de performance');
    console.log('=' .repeat(50));
    
    const store = SecureKeyStoreFactory.create('android');
    StorageSimulator.clear();
    
    try {
      const startTime = Date.now();
      
      // Stocker 100 √©l√©ments
      console.log('\nüì¶ Stockage de 100 √©l√©ments...');
      for (let i = 0; i < 100; i++) {
        await store.storeEncryptedData(`key_${i}`, `value_${i}`);
      }
      
      const storageTime = Date.now() - startTime;
      console.log(`‚úÖ 100 √©l√©ments stock√©s en ${storageTime}ms`);
      
      // R√©cup√©rer tous les √©l√©ments
      console.log('\nüìñ R√©cup√©ration de 100 √©l√©ments...');
      const retrievalStart = Date.now();
      
      for (let i = 0; i < 100; i++) {
        const value = await store.getEncryptedData(`key_${i}`);
        if (value !== `value_${i}`) {
          console.log(`‚ùå Erreur √† l'index ${i}`);
        }
      }
      
      const retrievalTime = Date.now() - retrievalStart;
      console.log(`‚úÖ 100 √©l√©ments r√©cup√©r√©s en ${retrievalTime}ms`);
      
      // V√©rifier le nombre total de cl√©s
      const allKeys = await store.getAllKeys();
      console.log(`üìä Nombre total de cl√©s: ${allKeys.length}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur dans le test de performance: ${error}`);
    }
  }
  
  // Ex√©cuter tous les tests
  static async runAllTests() {
    console.log('üöÄ D√©marrage des tests SecureStorage');
    console.log('=' .repeat(60));
    
    try {
      await this.testAndroidBasicOperations();
      await this.testiOSBasicOperations();
      await this.testErrorHandling();
      await this.testPerformance();
      
      console.log('\nüéâ Tous les tests sont termin√©s !');
      console.log('=' .repeat(60));
      
    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©rale dans les tests: ${error}`);
    }
  }
}

// Fonction d'exemple d'utilisation
async function exempleUtilisation() {
  console.log('\nüìö Exemple d\'utilisation pratique');
  console.log('=' .repeat(50));
  
  // Cr√©er une instance pour Android
  const androidStore = SecureKeyStoreFactory.create('android');
  
  try {
    // Simuler une session utilisateur
    console.log('\nüë§ Simulation d\'une session utilisateur...');
    
    // Stocker les informations de session
    await androidStore.storeEncryptedData('session_token', 'abc123def456');
    await androidStore.storeEncryptedData('user_id', '12345');
    await androidStore.storeEncryptedData('last_login', new Date().toISOString());
    
    // R√©cup√©rer les informations
    const sessionToken = await androidStore.getEncryptedData('session_token');
    const userId = await androidStore.getEncryptedData('user_id');
    const lastLogin = await androidStore.getEncryptedData('last_login');
    
    console.log(`Session Token: ${sessionToken}`);
    console.log(`User ID: ${userId}`);
    console.log(`Derni√®re connexion: ${lastLogin}`);
    
    // Lister toutes les cl√©s de session
    const sessionKeys = await androidStore.getAllKeys();
    console.log(`Cl√©s de session: [${sessionKeys.join(', ')}]`);
    
    console.log('‚úÖ Exemple d\'utilisation termin√©');
    
  } catch (error) {
    console.error(`‚ùå Erreur dans l'exemple: ${error}`);
  }
}

// Auto-ex√©cution si le fichier est lanc√© directement
if (require.main === module) {
  console.log('üîê Tests SecureStorage - D√©marrage automatique\n');
  
  SecureStorageTests.runAllTests()
    .then(() => exempleUtilisation())
    .then(() => {
      console.log('\n‚ú® Tous les tests et exemples sont termin√©s !');
      process.exit(0);
    })
    .catch(error => {
      console.error(`üí• Erreur fatale: ${error}`);
      process.exit(1);
    });
}

// Exports pour utilisation dans d'autres fichiers
export { SecureStorageTests, exempleUtilisation };
